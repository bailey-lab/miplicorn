[{"path":"https://bailey-lab.github.io/miplicorn/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Aris Paschalidis Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/articles/faq.html","id":"how-can-i-add-metadata-to-my-data","dir":"Articles","previous_headings":"","what":"How can I add metadata to my data?","title":"FAQ","text":"add metadata metadata, must read metadata file R object combine result data. Metadata often saved delimited file—commonly CSV (comma separated values) TSV (tab separated values)—excel file. several packages can used read files, recommend use {vroom} delimited files {readxl} excel files. reading metadata, can add metadata data frame using one {dplyr}’s mutating joins. Note may need change argument reflect proper column name metadata.","code":"metadata <- vroom::vroom(\"path/to/file\") # OR metadata <- readxl::read_excel(\"path/to/file\") dplyr::left_join(data, metadata, by = c(\"sample\" = \"ID\")) #> # A tibble: 10 × 10 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 LA-05-37  PF3D7_… crt   crt-Cys72Ser  missense_v… Cys72Ser  Yes          1716 #>  2 KO-05-62  PF3D7_… PF3D… PF3D7_113340… missense_v… Glu187Lys No            246 #>  3 HO-05-13  PF3D7_… PF3D… PF3D7-145120… synonymous… Asn71Asn  Yes             1 #>  4 TO-05-43  PF3D7_… PF3D… PF3D7_113340… missense_v… Glu121Lys No             40 #>  5 KO-05-45  PF3D7_… PF3D… PF3D7_113340… missense_v… Glu405Lys No              0 #>  6 KS-05-95  PF3D7_… crt   crt-Ala220Ser missense_v… Ala220Ser Yes             1 #>  7 AR-05-25  PF3D7_… dhps  dhps-Ile431V… missense_v… Ile431Val Yes           274 #>  8 HO-05-52  PF3D7_… PF3D… PF3D7_113340… missense_v… Ser283Leu No            736 #>  9 KN-05-54  PF3D7_… pph   pph-Asn1189_… disruptive… Asn1189_… No              0 #> 10 LA-05-100 PF3D7_… dhfr… dhfr-ts-Cys5… missense_v… Cys59Arg  Yes            17 #> # … with 2 more variables: District <chr>, Facility <chr>"},{"path":"https://bailey-lab.github.io/miplicorn/dev/articles/faq.html","id":"my-sample-names-do-not-match","dir":"Articles","previous_headings":"How can I add metadata to my data?","what":"My sample names do not match","title":"FAQ","text":"case sample names match, first make sure reading correct files! cases, data metadata sample names may slightly different. example, consider dataset following sample names: order add metadata dataset, must first perform string manipulation sample names dataset metadata align. , can leverage {stringr} package. can use {dplyr} :","code":"#>  [1] \"LA-05-37-ug-sur-2020-1\"  \"KO-05-62-ug-sur-2020-1\"  #>  [3] \"HO-05-13-ug-sur-2020-1\"  \"TO-05-43-ug-sur-2020-1\"  #>  [5] \"KO-05-45-ug-sur-2020-1\"  \"KS-05-95-ug-sur-2020-1\"  #>  [7] \"AR-05-25-ug-sur-2020-1\"  \"HO-05-52-ug-sur-2020-1\"  #>  [9] \"KN-05-54-ug-sur-2020-1\"  \"LA-05-100-ug-sur-2020-1\" data_formatted <- data_misformatted %>%   dplyr::mutate(sample = stringr::str_remove(sample, \"-ug.*\")) dplyr::left_join(data_formatted, metadata, by = c(\"sample\" = \"ID\")) #> # A tibble: 10 × 10 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 LA-05-37  PF3D7_… crt   crt-Cys72Ser  missense_v… Cys72Ser  Yes          1716 #>  2 KO-05-62  PF3D7_… PF3D… PF3D7_113340… missense_v… Glu187Lys No            246 #>  3 HO-05-13  PF3D7_… PF3D… PF3D7-145120… synonymous… Asn71Asn  Yes             1 #>  4 TO-05-43  PF3D7_… PF3D… PF3D7_113340… missense_v… Glu121Lys No             40 #>  5 KO-05-45  PF3D7_… PF3D… PF3D7_113340… missense_v… Glu405Lys No              0 #>  6 KS-05-95  PF3D7_… crt   crt-Ala220Ser missense_v… Ala220Ser Yes             1 #>  7 AR-05-25  PF3D7_… dhps  dhps-Ile431V… missense_v… Ile431Val Yes           274 #>  8 HO-05-52  PF3D7_… PF3D… PF3D7_113340… missense_v… Ser283Leu No            736 #>  9 KN-05-54  PF3D7_… pph   pph-Asn1189_… disruptive… Asn1189_… No              0 #> 10 LA-05-100 PF3D7_… dhfr… dhfr-ts-Cys5… missense_v… Cys59Arg  Yes            17 #> # … with 2 more variables: District <chr>, Facility <chr>"},{"path":"https://bailey-lab.github.io/miplicorn/dev/articles/faq.html","id":"how-can-i-combine-multiple-probe-sets","dir":"Articles","previous_headings":"","what":"How can I combine multiple probe sets?","title":"FAQ","text":"order combine multiple probe sets, first important ensure plan conduct analysis probe set. , may want reconsider combining multiple probe sets. Assuming want combine type data probe set, can simply bind rows using {dplyr}.","code":"dplyr::bind_rows(   list(probe_1 = probe_1, probe_2 = probe_2, probe_3 = probe_3),   .id = \"probe_set\" ) #> # A tibble: 30 × 9 #>    probe_set sample   chrom pos     ref    alt   mutation_name targeted coverage #>    <chr>     <chr>    <chr> <chr>   <chr>  <chr> <chr>         <chr>       <dbl> #>  1 probe_1   AR-05-54 chr13 1629329 AATAA… A     chr13:162932… No              0 #>  2 probe_1   AR-05-73 chr13 1719135 A      T     chr13:171913… No             23 #>  3 probe_1   KS-05-35 chr8  495991  C      T     chr8:495991:… No              0 #>  4 probe_1   KN-05-43 chr13 1701344 TAT    A     chr13:170134… No             10 #>  5 probe_1   MU-05-69 chr13 1713479 C      T     chr13:171347… No              3 #>  6 probe_1   JI-05-82 chr13 1706967 C      A     chr13:170696… No              0 #>  7 probe_1   JI-05-28 chr13 1706000 A      G     chr13:170600… No             10 #>  8 probe_1   AG-05-28 chr13 1706978 GATTA… TATT… chr13:170697… No              0 #>  9 probe_1   AG-05-82 chr4  848676  T      A     chr4:848676:… No              0 #> 10 probe_1   KS-05-63 chr4  736960  C      T     chr4:736960:… No              0 #> # … with 20 more rows"},{"path":"https://bailey-lab.github.io/miplicorn/dev/articles/large-files.html","id":"file-sizes","dir":"Articles","previous_headings":"","what":"File Sizes","title":"Dealing with large data sets","text":"world genomic sequencing, files often several gigabytes large containing millions data points. Reading files local machines, laptop, can take excruciating amount time. programs can handle large amounts data, easy simple solution process data chunks. instance, instead looking ten chromosomes simultaneously, may simpler focus two three time.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/articles/large-files.html","id":"filters","dir":"Articles","previous_headings":"","what":"Filters","title":"Dealing with large data sets","text":"entire read_tbl_*() family functions provide ability filter data data may load run faster. works filtering even objects loaded R. Data can filtered using information present metadata, may even filter multiple conditions.","code":"cov_file <- miplicorn_example(\"coverage_AA_table.csv\")  read_tbl_coverage(cov_file) #> # A tibble: 6,344 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           608 #>  2 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            20 #>  3 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           158 #>  4 D10-JJJ-5 PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             2 #>  5 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             1 #>  6 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           129 #>  7 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  8 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  9 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            90 #> 10 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           175 #> # … with 6,334 more rows  read_tbl_coverage(cov_file, gene == \"atp6\") #> # A tibble: 260 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           608 #>  2 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            20 #>  3 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           158 #>  4 D10-JJJ-5 PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             2 #>  5 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             1 #>  6 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           129 #>  7 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  8 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  9 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            90 #> 10 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           175 #> # … with 250 more rows  read_tbl_coverage(cov_file, gene == \"atp6\", targeted == \"Yes\") #> # A tibble: 156 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           608 #>  2 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            20 #>  3 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           158 #>  4 D10-JJJ-5 PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             2 #>  5 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             1 #>  6 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           129 #>  7 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  8 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  9 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            90 #> 10 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           175 #> # … with 146 more rows"},{"path":"https://bailey-lab.github.io/miplicorn/dev/articles/miplicorn.html","id":"parse","dir":"Articles","previous_headings":"","what":"Parse","title":"Introduction to miplicorn","text":"{MIPTools} provides several .csv files can analyzed, parsing files difficult non-rectangular structure. , attempting read files default parameters fails. visible, six rows metadata, specify gene ID, gene, mutation name, etc. remaining rows contain data actually interested : rows contain samples columns contain positions interested . difficult part reading files metadata must extracted treated differently data . miplicorn, therefore, provides family functions: read_tbl_*() quickly read non-rectangular files. functions generate tibble row represents sample position. Thus, multiple entries unique sample.","code":"#> # A tibble: 10 × 5 #>    X1            X2               X3               X4               X5           #>    <chr>         <chr>            <chr>            <chr>            <chr>        #>  1 Gene ID       PF3D7_0106300    PF3D7_0106300    PF3D7_0106300    PF3D7_01063… #>  2 Gene          atp6             atp6             atp6             atp6         #>  3 Mutation Name atp6-Ala623Glu   atp6-Glu431Lys   atp6-Gly639Asp   atp6-Ser466… #>  4 ExonicFunc    missense_variant missense_variant missense_variant missense_va… #>  5 AA Change     Ala623Glu        Glu431Lys        Gly639Asp        Ser466Asn    #>  6 Targeted      Yes              Yes              No               No           #>  7 D10-JJJ-23    608.0            699.0            608.0            237.0        #>  8 D10-JJJ-43    20.0             30.0             20.0             0.0          #>  9 D10-JJJ-55    158.0            242.0            158.0            61.0         #> 10 D10-JJJ-5     2.0              9.0              2.0              1.0 cov_file <- miplicorn::miplicorn_example(\"coverage_AA_table.csv\")  data <- miplicorn::read_tbl_coverage(cov_file) data #> # A tibble: 6,344 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           608 #>  2 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            20 #>  3 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           158 #>  4 D10-JJJ-5 PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             2 #>  5 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             1 #>  6 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           129 #>  7 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  8 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  9 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            90 #> 10 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           175 #> # … with 6,334 more rows"},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/articles/miplicorn.html","id":"amino-acids","dir":"Articles","previous_headings":"Manipulate","what":"Amino acids","title":"Introduction to miplicorn","text":"user may want convert amino acid abbreviations three one letters abbreviation, vice versa easier interpretation data.","code":"data %>%   dplyr::mutate(aa_change = convert_three(aa_change)) #> # A tibble: 6,344 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… A623E     Yes           608 #>  2 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… A623E     Yes            20 #>  3 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… A623E     Yes           158 #>  4 D10-JJJ-5 PF3D7_… atp6  atp6-Ala623G… missense_v… A623E     Yes             2 #>  5 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… A623E     Yes             1 #>  6 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… A623E     Yes           129 #>  7 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… A623E     Yes             0 #>  8 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… A623E     Yes             0 #>  9 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… A623E     Yes            90 #> 10 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… A623E     Yes           175 #> # … with 6,334 more rows"},{"path":"https://bailey-lab.github.io/miplicorn/dev/articles/miplicorn.html","id":"sort","dir":"Articles","previous_headings":"Manipulate","what":"Sort","title":"Introduction to miplicorn","text":"plotting data, useful able control order data appears. dplyr::arrange() provides functionality sort numeric character data, lacks ability naturally sort alphanumeric vectors, vectors containing letters numerics. Furthermore, ordering data kept fed plotting functions. arrange_natural() attempts address limitations.","code":"arrange_natural(data, sample, gene) #> # A tibble: 6,344 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <fct>     <chr>   <fct> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-1 PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            10 #>  2 D10-JJJ-1 PF3D7_… atp6  atp6-Glu431L… missense_v… Glu431Lys Yes             5 #>  3 D10-JJJ-1 PF3D7_… atp6  atp6-Gly639A… missense_v… Gly639Asp No             10 #>  4 D10-JJJ-1 PF3D7_… atp6  atp6-Ser466A… missense_v… Ser466Asn No              2 #>  5 D10-JJJ-1 PF3D7_… atp6  atp6-Ser769A… missense_v… Ser769Asn Yes             1 #>  6 D10-JJJ-1 PF3D7_… crt   crt-Ala220Ser missense_v… Ala220Ser Yes             2 #>  7 D10-JJJ-1 PF3D7_… crt   crt-Asn326Asp missense_v… Asn326Asp No              2 #>  8 D10-JJJ-1 PF3D7_… crt   crt-Asn326Ser missense_v… Asn326Ser Yes             2 #>  9 D10-JJJ-1 PF3D7_… crt   crt-Asn75Glu  missense_v… Asn75Glu  Yes             0 #> 10 D10-JJJ-1 PF3D7_… crt   crt-Cys72Ser  missense_v… Cys72Ser  Yes             0 #> # … with 6,334 more rows"},{"path":"https://bailey-lab.github.io/miplicorn/dev/articles/miplicorn.html","id":"visualize","dir":"Articles","previous_headings":"","what":"Visualize","title":"Introduction to miplicorn","text":"almost limitless different ways visualize single set data. miplicorn address every method, aims simplify creation key figures.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/articles/miplicorn.html","id":"chromosome-map","dir":"Articles","previous_headings":"Visualize","what":"Chromosome map","title":"Introduction to miplicorn","text":"two built ways create chromosome maps, set strengths weaknesses. can either make interactive map detailed karyoplot.","code":"colours <- c(\"#006A8EFF\", \"#A8A6A7FF\", \"#B1283AFF\") map <- plot_chromoMap(genome_Pf3D7, probes, colours = colours)  # Used to embed into html widgetframe::frameableWidget(map) plot_karyoploteR(genome_Pf3D7, probes, colours = colours)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/articles/miplicorn.html","id":"average-coverage","dir":"Articles","previous_headings":"Visualize","what":"Average coverage","title":"Introduction to miplicorn","text":"N.B. remaining figures yet incorporated  miplicorn, time goes , visualization methods  added.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aris Paschalidis. Author, maintainer.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Paschalidis (2022). miplicorn: Framework MIP Amplicon Analysis. https://bailey-lab.github.io/miplicorn/, https://github.com/bailey-lab/miplicorn.","code":"@Manual{,   title = {miplicorn: A Framework for MIP and Amplicon Analysis},   author = {Aris Paschalidis},   year = {2022},   note = {https://bailey-lab.github.io/miplicorn/, https://github.com/bailey-lab/miplicorn}, }"},{"path":"https://bailey-lab.github.io/miplicorn/dev/index.html","id":"miplicorn-","dir":"","previous_headings":"","what":"A Framework for MIP and Amplicon Analysis","title":"A Framework for MIP and Amplicon Analysis","text":"miplicorn establishes unified framework molecular inversion probe (MIP) amplicon analysis. provides tools quickly parse files several gigabytes large, filter manipulate data, analyze data, , informatively, visualize data.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Framework for MIP and Amplicon Analysis","text":"may install package Github using devtools.","code":"# install.packages(\"devtools\") devtools::install_github(\"bailey-lab/miplicorn\")"},{"path":"https://bailey-lab.github.io/miplicorn/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Framework for MIP and Amplicon Analysis","text":"See vignette(\"miplicorn\") extensive introduction demonstration several features package.","code":"library(miplicorn)  ref_file <- miplicorn_example(\"reference_AA_table.csv\") alt_file <- miplicorn_example(\"reference_AA_table.csv\") cov_file <- miplicorn_example(\"reference_AA_table.csv\")  data <- read_tbl_ref_alt_cov(ref_file, alt_file, cov_file, gene == \"atp6\" | gene == \"crt\") data #> # A tibble: 832 × 10 #>   sample     gene_id       gene  mutation_name  exonic_func   aa_change targeted #>   <chr>      <chr>         <chr> <chr>          <chr>         <chr>     <chr> #> 1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> 2 D10-JJJ-43 PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> 3 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> 4 D10-JJJ-5  PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> 5 D10-JJJ-47 PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> # … with 827 more rows, and 3 more variables: ref_umi_count <dbl>, #> #   alt_umi_count <dbl>, coverage <dbl>  filter_coverage(data, 100) #> # A tibble: 236 × 10 #>   sample     gene_id       gene  mutation_name  exonic_func   aa_change targeted #>   <chr>      <chr>         <chr> <chr>          <chr>         <chr>     <chr> #> 1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> 2 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> 3 D10-JJJ-15 PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> 4 D10-JJJ-52 PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> 5 D10-JJJ-38 PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> # … with 231 more rows, and 3 more variables: ref_umi_count <dbl>, #> #   alt_umi_count <dbl>, coverage <dbl> filter_targeted(data, \"Yes\") #> # A tibble: 624 × 10 #>   sample     gene_id       gene  mutation_name  exonic_func   aa_change targeted #>   <chr>      <chr>         <chr> <chr>          <chr>         <chr>     <chr> #> 1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> 2 D10-JJJ-43 PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> 3 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> 4 D10-JJJ-5  PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> 5 D10-JJJ-47 PF3D7_0106300 atp6  atp6-Ala623Glu missense_var… Ala623Glu Yes #> # … with 619 more rows, and 3 more variables: ref_umi_count <dbl>, #> #   alt_umi_count <dbl>, coverage <dbl>  prev <- mutation_prevalence(data, 5) prev #> # A tibble: 16 × 4 #>   mutation_name  n_total n_mutant prevalence #>   <chr>            <int>    <int>      <dbl> #> 1 atp6-Ala623Glu      36       36          1 #> 2 atp6-Glu431Lys      39       39          1 #> 3 atp6-Gly639Asp      26       26          1 #> 4 atp6-Ser466Asn      15       15          1 #> 5 atp6-Ser769Asn      17       17          1 #> # … with 11 more rows  plot(prev)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/arrange_natural.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange rows by column values naturally — arrange_natural","title":"Arrange rows by column values naturally — arrange_natural","text":"arrange_natural() orders rows data frame values selected columns. Data naturally sorted (see Details, ) ascending order. Columns used sorting converted factors preserve ordering. Grouping ignored.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/arrange_natural.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange rows by column values naturally — arrange_natural","text":"","code":"arrange_natural(.data, ...)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/arrange_natural.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange rows by column values naturally — arrange_natural","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). ... <data-masking> Variables sort .","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/arrange_natural.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange rows by column values naturally — arrange_natural","text":"object type .data. output following properties: rows appear output, (usually) different place. Sorted columns converted factors. columns modified. Data frame attributes preserved.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/arrange_natural.html","id":"natural-sorting","dir":"Reference","previous_headings":"","what":"Natural sorting","title":"Arrange rows by column values naturally — arrange_natural","text":"arrange_natural() built dplyr::arrange() provide natural sorting (sorting strings letters numerals). underlying implementation natural sorting based stringi library.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/arrange_natural.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange rows by column values naturally — arrange_natural","text":"","code":"df <- tibble::tribble(   ~sample, ~gene,   \"D10-23\", \"atp6\",   \"D10-43\", \"mdr1\",   \"D10-55\", \"atp6\",   \"D10-5\", \"mdr1\",   \"D10-47\", \"dhps\",   \"D10-15\", \"atp6\" )  arrange_natural(df, sample) #> # A tibble: 6 × 2 #>   sample gene  #>   <fct>  <chr> #> 1 D10-5  mdr1  #> 2 D10-15 atp6  #> 3 D10-23 atp6  #> 4 D10-43 mdr1  #> 5 D10-47 dhps  #> 6 D10-55 atp6  df %>% arrange_natural(sample, gene) #> # A tibble: 6 × 2 #>   sample gene  #>   <fct>  <fct> #> 1 D10-5  mdr1  #> 2 D10-15 atp6  #> 3 D10-23 atp6  #> 4 D10-43 mdr1  #> 5 D10-47 dhps  #> 6 D10-55 atp6"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/chromosome-map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create annotated chromosome map — chromosome-map","title":"Create annotated chromosome map — chromosome-map","text":"Render graphics visualization entire chromosomes chromosomal regions. Annotate multiple targeted regions visualize probe targets.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/chromosome-map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create annotated chromosome map — chromosome-map","text":"","code":"plot_chromoMap(genome, probes, title = \"\", colours = list(), ...)  plot_karyoploteR(genome, probes, title = \"\", colours = list(), ...)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/chromosome-map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create annotated chromosome map — chromosome-map","text":"genome tibble indicating starting ending position chromosome. Contains three columns: Name chromosome starting position chromosome ending position chromosome. probes tibble indicating starting ending position probe. Contains four columns: Name chromosome probe starting position probe ending position probe identifier indicating probe set probe belongs . title title plot. colours vector colours indicating annotation colour probe set. ... <dynamic-dots> Additional arguments passed internal plotting functions.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/chromosome-map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create annotated chromosome map — chromosome-map","text":"","code":"if (FALSE) { # interactive() probes <- tibble::tribble(   ~chrom, ~start, ~end, ~probe_set,   \"chr14\", 2342135L, 2342284L, \"IBC\",   \"chr3\", 830503L, 830769L, \"DR2\",   \"chr5\", 482233L, 482391L, \"IBC\",   \"chr9\", 375274L, 375417L, \"IBC\",   \"chr12\", 532032L, 532281L, \"DR2\",   \"chr7\", 383447L, 383653L, \"HAP\",   \"chr14\", 1401991L, 1402160L, \"IBC\",   \"chr4\", 734737L, 734936L, \"HAP\",   \"chr10\", 93054L, 93223L, \"IBC\",   \"chr7\", 162127L, 162277L, \"IBC\" ) single_probe <- tibble::tribble(   ~chrom, ~start, ~end, ~probe_set,   \"chr14\", 2342135L, 2342284L, \"IBC\",   \"chr5\", 482233L, 482391L, \"IBC\",   \"chr9\", 375274L, 375417L, \"IBC\",   \"chr14\", 1401991L, 1402160L, \"IBC\",   \"chr10\", 93054L, 93223L, \"IBC\",   \"chr7\", 162127L, 162277L, \"IBC\" )  plot_chromoMap(genome_Pf3D7, probes) plot_chromoMap(genome_Pf3D7, single_probe, colours = \"red\")  plot_karyoploteR(genome_Pf3D7, single_probe) plot_karyoploteR(   genome_Pf3D7,   probes,   title = \"Example Chromosome Map\",   colours = c(\"#006A8EFF\", \"#A8A6A7FF\", \"#B1283AFF\") ) }"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/chromosome_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create annotated chromosome map — chromosome_map","title":"Create annotated chromosome map — chromosome_map","text":"function deprecated simple wrapper around plot_chromoMap() plot_karyoploteR() added unnecessary complexity function calls.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/chromosome_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create annotated chromosome map — chromosome_map","text":"","code":"chromosome_map(   genome,   probes,   map_pkg = c(\"chromoMap\", \"karyoploteR\"),   title = \"\",   colours = list(),   ... )"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/chromosome_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create annotated chromosome map — chromosome_map","text":"genome tibble indicating starting ending position chromosome. Contains three columns: Name chromosome starting position chromosome ending position chromosome. probes tibble indicating starting ending position probe. Contains four columns: Name chromosome probe starting position probe ending position probe identifier indicating probe set probe belongs . map_pkg package used underlying implementation chromosome map. title title plot. colours vector colours indicating annotation colour probe set. ... <dynamic-dots> Additional arguments passed internal plotting functions.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/chromosome_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create annotated chromosome map — chromosome_map","text":"Render graphics visualization entire chromosomes chromosomal regions. Annotate multiple targeted regions visualize probe targets.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/chromosome_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create annotated chromosome map — chromosome_map","text":"","code":"probes <- tibble::tribble(   ~chrom, ~start, ~end, ~probe_set,   \"chr14\", 2342135L, 2342284L, \"IBC\",   \"chr3\", 830503L, 830769L, \"DR2\",   \"chr5\", 482233L, 482391L, \"IBC\",   \"chr9\", 375274L, 375417L, \"IBC\",   \"chr12\", 532032L, 532281L, \"DR2\",   \"chr7\", 383447L, 383653L, \"HAP\",   \"chr14\", 1401991L, 1402160L, \"IBC\",   \"chr4\", 734737L, 734936L, \"HAP\",   \"chr10\", 93054L, 93223L, \"IBC\",   \"chr7\", 162127L, 162277L, \"IBC\" ) single_probe <- tibble::tribble(   ~chrom, ~start, ~end, ~probe_set,   \"chr14\", 2342135L, 2342284L, \"IBC\",   \"chr5\", 482233L, 482391L, \"IBC\",   \"chr9\", 375274L, 375417L, \"IBC\",   \"chr14\", 1401991L, 1402160L, \"IBC\",   \"chr10\", 93054L, 93223L, \"IBC\",   \"chr7\", 162127L, 162277L, \"IBC\" )  chromosome_map(genome_Pf3D7, single_probe, \"karyoploteR\") #> Warning: `chromosome_map()` was deprecated in miplicorn 0.2.0. #> The function has been deprecated in favor of `plot_chromoMap()` and #>  `plot_karyoploteR()`. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. # -> plot_karyoploteR(genome_Pf3D7, single_probe)   chromosome_map(genome_Pf3D7, probes, \"chromoMap\") # -> plot_chromoMap(genome_Pf3D7, probes)  chromosome_map(genome_Pf3D7, single_probe, \"chromoMap\", colours = \"red\") # -> plot_chromoMap(genome_Pf3D7, single_probe, colours = \"red\")  chromosome_map(   genome_Pf3D7,   probes,   \"karyoploteR\",   title = \"Example Chromosome Map\",   colours = c(\"#006A8EFF\", \"#A8A6A7FF\", \"#B1283AFF\") )  # -> plot_karyoploteR(   genome_Pf3D7,   probes,   title = \"Example Chromosome Map\",   colours = c(\"#006A8EFF\", \"#A8A6A7FF\", \"#B1283AFF\") )"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/convert_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert amino acid abbreviations — convert_single","title":"Convert amino acid abbreviations — convert_single","text":"convert_single() converts 1-letter abbreviation 3-letter abbreviation convert_three() opposite.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/convert_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert amino acid abbreviations — convert_single","text":"","code":"convert_single(str)  convert_three(str)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/convert_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert amino acid abbreviations — convert_single","text":"str String containing amino acids convert.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/convert_single.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert amino acid abbreviations — convert_single","text":"Conversion case-insensitive, always returns capitalized 1-letter abbreviation 3-letter abbreviation title-case.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/convert_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert amino acid abbreviations — convert_single","text":"","code":"# Convert 1-letter abbreviation convert_single(\"G235L\") #> [1] \"Gly235Leu\" convert_single(\"s545p\") #> [1] \"Ser545Pro\"  # Convert 3-letter abbreviation convert_three(\"Gly235Leu\") #> [1] \"G235L\" convert_three(\"SER545LEU\") #> [1] \"S545L\""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/custom_themes.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom themes — custom_themes","title":"Custom themes — custom_themes","text":"custom ggplot2 themes control non-data display. may tweak components themes using ggplot2::theme().","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/custom_themes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom themes — custom_themes","text":"","code":"theme_miplicorn(   base_size = 10,   base_family = \"\",   base_line_size = base_size/22,   base_rect_size = base_size/22 )  theme_rainbow(   base_size = 12,   base_family = \"\",   base_line_size = base_size/22,   base_rect_size = base_size/22 )"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/custom_themes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom themes — custom_themes","text":"base_size Base font size, given pts. base_family Base font family. base_line_size Base size line elements. base_rect_size Base size rect elements.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/custom_themes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom themes — custom_themes","text":"","code":"library(\"ggplot2\") p <- ggplot(mtcars, aes(x = wt, y = mpg, colour = factor(gear))) +   geom_point() +   facet_wrap(~am) +   geom_smooth(method = \"lm\", se = FALSE)  p + theme_miplicorn() #> `geom_smooth()` using formula 'y ~ x'  p + theme_rainbow() #> `geom_smooth()` using formula 'y ~ x'"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows using a single column value — filter","title":"Subset rows using a single column value — filter","text":"filter_*() functions used subset data frame. function subsets rows based value one column. numeric columns, row kept value greater equal value specified. categorical columns, row kept value equal value specified. Note condition evaluates NA row dropped, unlike base subsetting [.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows using a single column value — filter","text":"","code":"filter_aa_change(.data, .value, .preserve = FALSE)  filter_alt_umi_count(.data, .value, .preserve = FALSE)  filter_coverage(.data, .value, .preserve = FALSE)  filter_gene(.data, .value, .preserve = FALSE)  filter_mutation_name(.data, .value, .preserve = FALSE)  filter_ref_umi_count(.data, .value, .preserve = FALSE)  filter_targeted(.data, .value, .preserve = FALSE)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows using a single column value — filter","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). .value filtering value applied. .preserve Relevant .data input grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, otherwise grouping kept .","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows using a single column value — filter","text":"","code":"data <- tibble::tribble(   ~sample, ~gene, ~coverage,   \"S1\", \"atp6\", 10,   \"S2\", \"crt\", 20, ) filter_gene(data, \"atp6\") #> Warning: This function provides a simple filtering interface. #> ℹ For more complex filtering, please use `dplyr::filter()`. #> This warning is displayed once every 8 hours. #> # A tibble: 1 × 3 #>   sample gene  coverage #>   <chr>  <chr>    <dbl> #> 1 S1     atp6        10 filter_coverage(data, 15) #> Warning: This function provides a simple filtering interface. #> ℹ For more complex filtering, please use `dplyr::filter()`. #> This warning is displayed once every 8 hours. #> # A tibble: 1 × 3 #>   sample gene  coverage #>   <chr>  <chr>    <dbl> #> 1 S2     crt         20"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/filter_fn_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter function factory — filter_fn_factory","title":"Filter function factory — filter_fn_factory","text":"Define function factory create filtering functions filter data based single column.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/filter_fn_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter function factory — filter_fn_factory","text":"","code":"filter_fn_factory(.col, .type = c(\"numeric\", \"character\"))"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/filter_fn_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter function factory — filter_fn_factory","text":".col name column used filter data. .type type column.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/filter_fn_factory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter function factory — filter_fn_factory","text":"","code":"if (FALSE) {  filter_coverage <- filter_fn_factory(\"coverage\", \"numeric\") filter_gene <- filter_fn_factory(\"gene\", \"character\") }"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/genome_Pf3D7.html","id":null,"dir":"Reference","previous_headings":"","what":"Plasmodium falciparum 3D7 genome — genome_Pf3D7","title":"Plasmodium falciparum 3D7 genome — genome_Pf3D7","text":"data set contains information P. falciparum 3D7 reference genome. original source PlasmoDB.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/genome_Pf3D7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plasmodium falciparum 3D7 genome — genome_Pf3D7","text":"","code":"genome_Pf3D7"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/genome_Pf3D7.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Plasmodium falciparum 3D7 genome — genome_Pf3D7","text":"tibble 16 rows 3 variables: chrom Name chromosome start starting position chromosome end ending position chromosome","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/genome_Pf3D7.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Plasmodium falciparum 3D7 genome — genome_Pf3D7","text":"PlasmoDB Pf. 3D7","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/genome_Pf3D7.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plasmodium falciparum 3D7 genome — genome_Pf3D7","text":"","code":"genome_Pf3D7 #> # A tibble: 16 × 3 #>    chrom  start     end #>    <chr>  <int>   <int> #>  1 chr1       1  640851 #>  2 chr2       1  947102 #>  3 chr3       1 1067971 #>  4 chr4       1 1200490 #>  5 chr5       1 1343557 #>  6 chr6       1 1418242 #>  7 chr7       1 1445207 #>  8 chr8       1 1472805 #>  9 chr9       1 1541735 #> 10 chr10      1 1687656 #> 11 chr11      1 2038340 #> 12 chr12      1 2271494 #> 13 chr13      1 2925236 #> 14 chr14      1 3291936 #> 15 chrapi     1   34250 #> 16 chrmit     1    5967"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/label_mutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Label mutations — label_mutations","title":"Label mutations — label_mutations","text":"data point, label mutation \"ref\", \"alt\", \"ins\", \"del\". Data points reference (REF) alternate (ALT) calls labeled \"ref\". Mutations whose REF ALT calls one base pair ALT calls REF calls labeled \"alt\". Mutations whose REF ALT calls differ length ALT calls REF calls labeled \"ins\". Mutations whose REF ALT calls differ length REF calls ALT calls labeled \"del\".","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/label_mutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label mutations — label_mutations","text":"","code":"label_mutations(.data, .before = NULL, .after = NULL)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/label_mutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label mutations — label_mutations","text":".data data set containing REF ALT calls. ., .<tidy-select> Optionally, control new columns appear (default add right hand side). See relocate() details.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/label_mutations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label mutations — label_mutations","text":"","code":"data <- tibble::tribble(   ~sample, ~pos, ~ref, ~alt, ~ref_umi_count, ~alt_umi_count, ~coverage,   \"S1\", \"1049838\", \"A\", \"G\", 54, 10, 64,   \"S2\", \"801498\", \"G\", \"A\", 15, 0, 15,   \"S3\", \"625403\", \"T\", \"C\", 0, 15, 15,   \"S4\", \"748165\", \"GA\", \"G\", 2, 18, 20,   \"S5\", \"487199\", \"G\", \"ATC\", 0, 10, 10 )  label_mutations(data) #> # A tibble: 5 × 8 #>   sample pos     ref   alt   ref_umi_count alt_umi_count coverage ans_der_indel #>   <chr>  <chr>   <chr> <chr>         <dbl>         <dbl>    <dbl> <chr>         #> 1 S1     1049838 A     G                54            10       64 ref           #> 2 S2     801498  G     A                15             0       15 ref           #> 3 S3     625403  T     C                 0            15       15 alt           #> 4 S4     748165  GA    G                 2            18       20 del           #> 5 S5     487199  G     ATC               0            10       10 ins           label_mutations(data, .after = alt) #> # A tibble: 5 × 8 #>   sample pos     ref   alt   ans_der_indel ref_umi_count alt_umi_count coverage #>   <chr>  <chr>   <chr> <chr> <chr>                 <dbl>         <dbl>    <dbl> #> 1 S1     1049838 A     G     ref                      54            10       64 #> 2 S2     801498  G     A     ref                      15             0       15 #> 3 S3     625403  T     C     alt                       0            15       15 #> 4 S4     748165  GA    G     del                       2            18       20 #> 5 S5     487199  G     ATC   ins                       0            10       10 label_mutations(data, .before = pos) #> # A tibble: 5 × 8 #>   sample ans_der_indel pos     ref   alt   ref_umi_count alt_umi_count coverage #>   <chr>  <chr>         <chr>   <chr> <chr>         <dbl>         <dbl>    <dbl> #> 1 S1     ref           1049838 A     G                54            10       64 #> 2 S2     ref           801498  G     A                15             0       15 #> 3 S3     alt           625403  T     C                 0            15       15 #> 4 S4     del           748165  GA    G                 2            18       20 #> 5 S5     ins           487199  G     ATC               0            10       10"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/miplicorn-package.html","id":null,"dir":"Reference","previous_headings":"","what":"miplicorn: A Framework for MIP and Amplicon Analysis — miplicorn-package","title":"miplicorn: A Framework for MIP and Amplicon Analysis — miplicorn-package","text":"unified framework molecular inversion probe amplicon analysis. Provides tools parse, manipulate, analyze, visualize data.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/miplicorn-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"miplicorn: A Framework for MIP and Amplicon Analysis — miplicorn-package","text":"Maintainer: Aris Paschalidis aris.paschalidis@gmail.com (ORCID)","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/miplicorn_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to miplicorn examples — miplicorn_example","title":"Get path to miplicorn examples — miplicorn_example","text":"miplicorn contains several example files 'inst/extdata' directory. function can used access file paths.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/miplicorn_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to miplicorn examples — miplicorn_example","text":"","code":"miplicorn_example(path = NULL)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/miplicorn_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to miplicorn examples — miplicorn_example","text":"path Name file. NULL, example files listed.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/miplicorn_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to miplicorn examples — miplicorn_example","text":"","code":"# Get path to one example miplicorn_example(\"reference_AA_table.csv\") #> [1] \"/home/runner/work/_temp/Library/miplicorn/extdata/reference_AA_table.csv\"  # List all available examples miplicorn_example() #> [1] \"PlasmoDB-53_Pfalciparum3D7.gff\" \"alternate_AA_table.csv\"         #> [3] \"coverage_AA_table.csv\"          \"reference_AA_table.csv\""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/mutation_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute frequency of mutations — mutation_frequency","title":"Compute frequency of mutations — mutation_frequency","text":"Generate table representing frequency unique mutations. order ensure confidence results, threshold provided indicating confidence genotype calls. data meet threshold removed computation.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/mutation_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute frequency of mutations — mutation_frequency","text":"","code":"mutation_frequency(data, threshold)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/mutation_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute frequency of mutations — mutation_frequency","text":"data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). threshold minimum UMI count reflects confidence genotype call. Data UMI count less threshold filtered analysis.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/mutation_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute frequency of mutations — mutation_frequency","text":"tibble extra class mut_freq. output following columns: mutation_name: unique mutation sequenced. frequency: frequency mutation.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/mutation_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute frequency of mutations — mutation_frequency","text":"","code":"ref_file <- miplicorn_example(\"reference_AA_table.csv\") alt_file <- miplicorn_example(\"alternate_AA_table.csv\") cov_file <- miplicorn_example(\"coverage_AA_table.csv\") data <- read_tbl_ref_alt_cov(   ref_file,   alt_file,   cov_file,   gene == \"atp6\" | gene == \"crt\" ) mutation_frequency(data, 5) #> # A tibble: 16 × 2 #>    mutation_name  frequency #>    <chr>              <dbl> #>  1 atp6-Ala623Glu    0      #>  2 atp6-Glu431Lys    0      #>  3 atp6-Gly639Asp    0.184  #>  4 atp6-Ser466Asn    0.135  #>  5 atp6-Ser769Asn    0      #>  6 crt-Ala220Ser     0.202  #>  7 crt-Asn326Asp     0.128  #>  8 crt-Asn326Ser     0.0337 #>  9 crt-Asn75Glu      0.0534 #> 10 crt-Cys72Ser      0.146  #> 11 crt-His97Leu      0      #> 12 crt-His97Tyr      0      #> 13 crt-Ile356Leu     0.131  #> 14 crt-Ile356Thr     0.0554 #> 15 crt-Lys76Thr      0.201  #> 16 crt-Met74Ile      0.0534"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/mutation_prevalence.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute prevalence of mutations — mutation_prevalence","title":"Compute prevalence of mutations — mutation_prevalence","text":"Generate table representing prevalence unique mutations. order ensure confidence results, threshold provided indicating confidence genotype calls. data meet threshold removed computation.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/mutation_prevalence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute prevalence of mutations — mutation_prevalence","text":"","code":"mutation_prevalence(data, threshold)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/mutation_prevalence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute prevalence of mutations — mutation_prevalence","text":"data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). threshold minimum UMI count reflects confidence genotype call. Data UMI count less threshold filtered analysis.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/mutation_prevalence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute prevalence of mutations — mutation_prevalence","text":"tibble extra class mut_prev. output following columns: mutation_name: unique mutation sequenced. n_total: number samples mutation site sequenced. n_mutant: number samples mutation occurred. prevalence: prevalence mutation.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/mutation_prevalence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute prevalence of mutations — mutation_prevalence","text":"","code":"ref_file <- miplicorn_example(\"reference_AA_table.csv\") alt_file <- miplicorn_example(\"alternate_AA_table.csv\") cov_file <- miplicorn_example(\"coverage_AA_table.csv\") data <- read_tbl_ref_alt_cov(   ref_file,   alt_file,   cov_file,   gene == \"atp6\" | gene == \"crt\" ) mutation_prevalence(data, 5) #> # A tibble: 16 × 4 #>    mutation_name  n_total n_mutant prevalence #>    <chr>            <int>    <int>      <dbl> #>  1 atp6-Ala623Glu      36       NA     NA     #>  2 atp6-Glu431Lys      39       NA     NA     #>  3 atp6-Gly639Asp      26       19      0.731 #>  4 atp6-Ser466Asn      15        9      0.6   #>  5 atp6-Ser769Asn      17       NA     NA     #>  6 crt-Ala220Ser       11        4      0.364 #>  7 crt-Asn326Asp       21        8      0.381 #>  8 crt-Asn326Ser       26       NA     NA     #>  9 crt-Asn75Glu        29       24      0.828 #> 10 crt-Cys72Ser        31       23      0.742 #> 11 crt-His97Leu        47       NA     NA     #> 12 crt-His97Tyr        47       NA     NA     #> 13 crt-Ile356Leu       22       15      0.682 #> 14 crt-Ile356Thr       41       18      0.439 #> 15 crt-Lys76Thr        29       25      0.862 #> 16 crt-Met74Ile        29       24      0.828"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/plot_mutation_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot frequency of mutations — plot_mutation_frequency","title":"Plot frequency of mutations — plot_mutation_frequency","text":"Plot frequency mutations generated mutation_frequency(). frequency plotted y-axis amino acid change plotted x-axis. Data grouped gene mutation took place coloured according groupings.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/plot_mutation_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot frequency of mutations — plot_mutation_frequency","text":"","code":"plot_mutation_frequency(data)  # S3 method for mut_freq autoplot(object, ...)  # S3 method for mut_freq plot(x, ...)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/plot_mutation_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot frequency of mutations — plot_mutation_frequency","text":"data, object, x object class mut_freq. Derived output mutation_frequency(). ... arguments passed specific methods.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/plot_mutation_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot frequency of mutations — plot_mutation_frequency","text":"","code":"ref_file <- miplicorn_example(\"reference_AA_table.csv\") alt_file <- miplicorn_example(\"alternate_AA_table.csv\") cov_file <- miplicorn_example(\"coverage_AA_table.csv\") data <- read_tbl_ref_alt_cov(   ref_file,   alt_file,   cov_file,   gene == \"atp6\" | gene == \"crt\" ) frequency <- mutation_frequency(data, 5) plot(frequency)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/plot_mutation_prevalence.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot prevalence of mutations — plot_mutation_prevalence","title":"Plot prevalence of mutations — plot_mutation_prevalence","text":"Plot prevalence mutations generated mutation_prevalence(). prevalence plotted y-axis amino acid change plotted x-axis. Data grouped gene mutation took place coloured according groupings.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/plot_mutation_prevalence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot prevalence of mutations — plot_mutation_prevalence","text":"","code":"plot_mutation_prevalence(data)  # S3 method for mut_prev autoplot(object, ...)  # S3 method for mut_prev plot(x, ...)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/plot_mutation_prevalence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot prevalence of mutations — plot_mutation_prevalence","text":"data, object, x object class mut_prev. Derived output mutation_prevalence(). ... arguments passed specific methods.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/plot_mutation_prevalence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot prevalence of mutations — plot_mutation_prevalence","text":"","code":"ref_file <- miplicorn_example(\"reference_AA_table.csv\") alt_file <- miplicorn_example(\"alternate_AA_table.csv\") cov_file <- miplicorn_example(\"coverage_AA_table.csv\") data <- read_tbl_ref_alt_cov(   ref_file,   alt_file,   cov_file,   gene == \"atp6\" | gene == \"crt\" ) prevalence <- mutation_prevalence(data, 5) plot(prevalence)"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data — read-deprecated","title":"Read data — read-deprecated","text":"read_file() replaced read_tbl_reference(), read_tbl_alternate(), read_tbl_coverage() provide specific functionality. read() renamed read_tbl_ref_alt_cov().","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data — read-deprecated","text":"","code":"read(   .ref_file,   .alt_file,   .cov_file,   ...,   chrom = deprecated(),   gene = deprecated() )  read_file(.file, ..., .name = \"value\")"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data — read-deprecated","text":".ref_file File path reference table. .alt_file File path alternate table. .cov_file File path coverage table. ... data-masking Expressions return logical value used filter data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept. chrom : chromosome(s) filter . gene : gene(s) filter . .file File path file. .name information contained specific file. example \"coverage\" \"ref_umi_count\".","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data — read-deprecated","text":"tibble(). first six columns contain metadata associated sample mutation. Columns ref_umi_countand alt_umi_count contain umi count reference alternate allele, respectively. Column coverage contains coverage data point.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read data — read-deprecated","text":"Read files containing MIPtools' data tables. read_file() reads single file. read() convenience function reads files output MIPtools combines . Data files include reference table, alternate table, coverage table. Data read lazily using vroom package. Data can filtered, retaining rows satisfy conditions. retained, row question must produce value TRUE conditions. Note condition evaluates NA, row dropped.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-deprecated.html","id":"data-structure","dir":"Reference","previous_headings":"","what":"Data structure","title":"Read data — read-deprecated","text":"Input data must contain six rows metadata. metadata can vary depending type file read, typically contains information location mutation. remaining rows represent data sample sequenced. Together, alternate, reference, coverage tables can provide information mutations observed coverage site.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-deprecated.html","id":"useful-filter-functions","dir":"Reference","previous_headings":"","what":"Useful filter functions","title":"Read data — read-deprecated","text":"dplyr::filter() function employed subset rows data applying expressions ... column values determine rows retained. many functions operators useful constructing expressions used filter data: ==, >, >=, etc. &, |, !, xor() .na() (), near()","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-deprecated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data — read-deprecated","text":"","code":"# Get path to example file ref_file <- miplicorn_example(\"reference_AA_table.csv\") alt_file <- miplicorn_example(\"alternate_AA_table.csv\") cov_file <- miplicorn_example(\"coverage_AA_table.csv\") cov_file #> [1] \"/home/runner/work/_temp/Library/miplicorn/extdata/coverage_AA_table.csv\"  # Input sources ------------------------------------------------------------- # Read from a path read_file(cov_file, .name = \"coverage\") #> Warning: `read_file()` was deprecated in miplicorn 0.2.0. #> The function has been replaced by three more specific functions: #>  `read_tbl_reference()`, `read_tbl_alternate()`, and `read_tbl_coverage()`. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. #> Input detected as the coverage table. #> # A tibble: 6,344 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           608 #>  2 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            20 #>  3 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           158 #>  4 D10-JJJ-5 PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             2 #>  5 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             1 #>  6 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           129 #>  7 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  8 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  9 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            90 #> 10 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           175 #> # … with 6,334 more rows read(ref_file, alt_file, cov_file) #> Warning: `read()` was deprecated in miplicorn 0.2.0. #> Please use `read_tbl_ref_alt_cov()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. #> # A tibble: 6,344 × 10 #>    sample     gene_id       gene  mutation_name  exonic_func  aa_change targeted #>    <chr>      <chr>         <chr> <chr>          <chr>        <chr>     <chr>    #>  1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  2 D10-JJJ-43 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  3 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  4 D10-JJJ-5  PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  5 D10-JJJ-47 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  6 D10-JJJ-15 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  7 D10-JJJ-27 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  8 D10-JJJ-10 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  9 D10-JJJ-28 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> 10 D10-JJJ-52 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> # … with 6,334 more rows, and 3 more variables: ref_umi_count <dbl>, #> #   alt_umi_count <dbl>, coverage <dbl>  # You can also use paths directly # read_file(\"reference_AA_table.csv\") # read(\"reference_AA_table.csv\", \"alternate_AA_table.csv\", \"coverage_AA_table.csv\")  # Read entire file ---------------------------------------------------------- read_file(cov_file, .name = \"coverage\") #> Input detected as the coverage table. #> # A tibble: 6,344 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           608 #>  2 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            20 #>  3 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           158 #>  4 D10-JJJ-5 PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             2 #>  5 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             1 #>  6 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           129 #>  7 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  8 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  9 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            90 #> 10 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           175 #> # … with 6,334 more rows read(ref_file, alt_file, cov_file) #> # A tibble: 6,344 × 10 #>    sample     gene_id       gene  mutation_name  exonic_func  aa_change targeted #>    <chr>      <chr>         <chr> <chr>          <chr>        <chr>     <chr>    #>  1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  2 D10-JJJ-43 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  3 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  4 D10-JJJ-5  PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  5 D10-JJJ-47 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  6 D10-JJJ-15 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  7 D10-JJJ-27 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  8 D10-JJJ-10 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  9 D10-JJJ-28 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> 10 D10-JJJ-52 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> # … with 6,334 more rows, and 3 more variables: ref_umi_count <dbl>, #> #   alt_umi_count <dbl>, coverage <dbl>  # Data filtering ------------------------------------------------------------ # Filtering by one criterion read_file(cov_file, gene == \"atp6\", .name = \"coverage\") #> Input detected as the coverage table. #> # A tibble: 260 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           608 #>  2 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            20 #>  3 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           158 #>  4 D10-JJJ-5 PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             2 #>  5 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             1 #>  6 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           129 #>  7 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  8 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  9 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            90 #> 10 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           175 #> # … with 250 more rows read(ref_file, alt_file, cov_file, gene == \"atp6\") #> # A tibble: 260 × 10 #>    sample     gene_id       gene  mutation_name  exonic_func  aa_change targeted #>    <chr>      <chr>         <chr> <chr>          <chr>        <chr>     <chr>    #>  1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  2 D10-JJJ-43 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  3 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  4 D10-JJJ-5  PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  5 D10-JJJ-47 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  6 D10-JJJ-15 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  7 D10-JJJ-27 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  8 D10-JJJ-10 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  9 D10-JJJ-28 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> 10 D10-JJJ-52 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> # … with 250 more rows, and 3 more variables: ref_umi_count <dbl>, #> #   alt_umi_count <dbl>, coverage <dbl>  # Filtering by multiple criteria within a single logical expression read_file(cov_file, gene == \"atp6\" & targeted == \"Yes\", .name = \"coverage\") #> Input detected as the coverage table. #> # A tibble: 156 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           608 #>  2 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            20 #>  3 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           158 #>  4 D10-JJJ-5 PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             2 #>  5 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             1 #>  6 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           129 #>  7 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  8 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  9 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            90 #> 10 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           175 #> # … with 146 more rows read_file(cov_file, gene == \"atp6\" | targeted == \"Yes\", .name = \"coverage\") #> Input detected as the coverage table. #> # A tibble: 2,496 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           608 #>  2 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            20 #>  3 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           158 #>  4 D10-JJJ-5 PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             2 #>  5 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             1 #>  6 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           129 #>  7 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  8 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  9 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            90 #> 10 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           175 #> # … with 2,486 more rows read(ref_file, alt_file, cov_file, gene == \"atp6\" & targeted == \"Yes\") #> # A tibble: 156 × 10 #>    sample     gene_id       gene  mutation_name  exonic_func  aa_change targeted #>    <chr>      <chr>         <chr> <chr>          <chr>        <chr>     <chr>    #>  1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  2 D10-JJJ-43 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  3 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  4 D10-JJJ-5  PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  5 D10-JJJ-47 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  6 D10-JJJ-15 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  7 D10-JJJ-27 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  8 D10-JJJ-10 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  9 D10-JJJ-28 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> 10 D10-JJJ-52 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> # … with 146 more rows, and 3 more variables: ref_umi_count <dbl>, #> #   alt_umi_count <dbl>, coverage <dbl> read(ref_file, alt_file, cov_file, gene == \"atp6\" | targeted == \"Yes\") #> # A tibble: 2,496 × 10 #>    sample     gene_id       gene  mutation_name  exonic_func  aa_change targeted #>    <chr>      <chr>         <chr> <chr>          <chr>        <chr>     <chr>    #>  1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  2 D10-JJJ-43 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  3 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  4 D10-JJJ-5  PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  5 D10-JJJ-47 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  6 D10-JJJ-15 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  7 D10-JJJ-27 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  8 D10-JJJ-10 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  9 D10-JJJ-28 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> 10 D10-JJJ-52 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> # … with 2,486 more rows, and 3 more variables: ref_umi_count <dbl>, #> #   alt_umi_count <dbl>, coverage <dbl>  # When multiple expressions are used, they are combined using & read_file(cov_file, gene == \"atp6\", targeted == \"Yes\", .name = \"coverage\") #> Input detected as the coverage table. #> # A tibble: 156 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           608 #>  2 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            20 #>  3 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           158 #>  4 D10-JJJ-5 PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             2 #>  5 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             1 #>  6 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           129 #>  7 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  8 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  9 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            90 #> 10 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           175 #> # … with 146 more rows read(ref_file, alt_file, cov_file, gene == \"atp6\", targeted == \"Yes\") #> # A tibble: 156 × 10 #>    sample     gene_id       gene  mutation_name  exonic_func  aa_change targeted #>    <chr>      <chr>         <chr> <chr>          <chr>        <chr>     <chr>    #>  1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  2 D10-JJJ-43 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  3 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  4 D10-JJJ-5  PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  5 D10-JJJ-47 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  6 D10-JJJ-15 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  7 D10-JJJ-27 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  8 D10-JJJ-10 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  9 D10-JJJ-28 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> 10 D10-JJJ-52 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> # … with 146 more rows, and 3 more variables: ref_umi_count <dbl>, #> #   alt_umi_count <dbl>, coverage <dbl>"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Read MIPTools tables — read-tbl","title":"Read MIPTools tables — read-tbl","text":"read_tbl_*() family functions designed read data tables generated software program MIPtools. Data read lazily using vroom package. Data can filtered, retaining rows satisfy conditions. retained, row question must produce value TRUE conditions. Note condition evaluates NA, row dropped.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read MIPTools tables — read-tbl","text":"","code":"read_tbl_reference(.tbl, ...)  read_tbl_alternate(.tbl, ...)  read_tbl_coverage(.tbl, ...)  read_tbl_genotype(.tbl, ...)  read_tbl_haplotype(.tbl, ..., .col_select = NULL)  read_tbl_ref_alt_cov(   .tbl_ref,   .tbl_alt,   .tbl_cov,   ...,   chrom = deprecated(),   gene = deprecated() )"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read MIPTools tables — read-tbl","text":".tbl File path table. ... data-masking Expressions return logical value used filter data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept. .col_select One selection expressions, like dplyr::select(). Use c() list() use one expression. See ?dplyr::select details available selection options. .tbl_ref File path reference table. .tbl_alt File path alternate table. .tbl_cov File path coverage table. chrom chromosome(s) filter . gene gene(s) filter .","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read MIPTools tables — read-tbl","text":"tibble(). first six columns contain metadata associated sample mutation. last column contains information parsed table. cases, may umi_count cases may coverage associated data point.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-tbl.html","id":"data-structure","dir":"Reference","previous_headings":"","what":"Data structure","title":"Read MIPTools tables — read-tbl","text":"Input data must contain six rows metadata. metadata can vary depending type file read, typically contains information location mutation. remaining rows represent data sample sequenced.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-tbl.html","id":"useful-filter-functions","dir":"Reference","previous_headings":"","what":"Useful filter functions","title":"Read MIPTools tables — read-tbl","text":"dplyr::filter() function employed subset rows data applying expressions ... column values determine rows retained. many functions operators useful constructing expressions used filter data: ==, >, >=, etc. &, |, !, xor() .na() (), near()","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/read-tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read MIPTools tables — read-tbl","text":"","code":"# Get path to example file ref_file <- miplicorn_example(\"reference_AA_table.csv\") alt_file <- miplicorn_example(\"alternate_AA_table.csv\") cov_file <- miplicorn_example(\"coverage_AA_table.csv\") ref_file #> [1] \"/home/runner/work/_temp/Library/miplicorn/extdata/reference_AA_table.csv\"  # Input sources ------------------------------------------------------------- # Read from a path read_tbl_reference(ref_file) #> # A tibble: 6,344 × 8 #>    sample     gene_id       gene  mutation_name  exonic_func  aa_change targeted #>    <chr>      <chr>         <chr> <chr>          <chr>        <chr>     <chr>    #>  1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  2 D10-JJJ-43 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  3 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  4 D10-JJJ-5  PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  5 D10-JJJ-47 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  6 D10-JJJ-15 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  7 D10-JJJ-27 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  8 D10-JJJ-10 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  9 D10-JJJ-28 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> 10 D10-JJJ-52 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> # … with 6,334 more rows, and 1 more variable: ref_umi_count <dbl>  # You can also use paths directly # read_tbl_alternate(\"alternate_AA_table.csv\")  # Read entire file ---------------------------------------------------------- read_tbl_coverage(cov_file) #> # A tibble: 6,344 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           608 #>  2 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            20 #>  3 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           158 #>  4 D10-JJJ-5 PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             2 #>  5 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             1 #>  6 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           129 #>  7 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  8 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  9 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            90 #> 10 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           175 #> # … with 6,334 more rows  # Data filtering ------------------------------------------------------------ # Filtering by one criterion read_tbl_reference(ref_file, gene == \"atp6\") #> # A tibble: 260 × 8 #>    sample     gene_id       gene  mutation_name  exonic_func  aa_change targeted #>    <chr>      <chr>         <chr> <chr>          <chr>        <chr>     <chr>    #>  1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  2 D10-JJJ-43 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  3 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  4 D10-JJJ-5  PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  5 D10-JJJ-47 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  6 D10-JJJ-15 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  7 D10-JJJ-27 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  8 D10-JJJ-10 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  9 D10-JJJ-28 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> 10 D10-JJJ-52 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> # … with 250 more rows, and 1 more variable: ref_umi_count <dbl>  # Filtering by multiple criteria within a single logical expression read_tbl_alternate(alt_file, gene == \"atp6\" & targeted == \"Yes\") #> # A tibble: 156 × 8 #>    sample     gene_id       gene  mutation_name  exonic_func  aa_change targeted #>    <chr>      <chr>         <chr> <chr>          <chr>        <chr>     <chr>    #>  1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  2 D10-JJJ-43 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  3 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  4 D10-JJJ-5  PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  5 D10-JJJ-47 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  6 D10-JJJ-15 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  7 D10-JJJ-27 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  8 D10-JJJ-10 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  9 D10-JJJ-28 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> 10 D10-JJJ-52 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> # … with 146 more rows, and 1 more variable: alt_umi_count <dbl> read_tbl_coverage(cov_file, gene == \"atp6\" | targeted == \"Yes\") #> # A tibble: 2,496 × 8 #>    sample    gene_id gene  mutation_name exonic_func aa_change targeted coverage #>    <chr>     <chr>   <chr> <chr>         <chr>       <chr>     <chr>       <dbl> #>  1 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           608 #>  2 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            20 #>  3 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           158 #>  4 D10-JJJ-5 PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             2 #>  5 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             1 #>  6 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           129 #>  7 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  8 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes             0 #>  9 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes            90 #> 10 D10-JJJ-… PF3D7_… atp6  atp6-Ala623G… missense_v… Ala623Glu Yes           175 #> # … with 2,486 more rows  # When multiple expressions are used, they are combined using & read_tbl_reference(ref_file, gene == \"atp6\", targeted == \"Yes\") #> # A tibble: 156 × 8 #>    sample     gene_id       gene  mutation_name  exonic_func  aa_change targeted #>    <chr>      <chr>         <chr> <chr>          <chr>        <chr>     <chr>    #>  1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  2 D10-JJJ-43 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  3 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  4 D10-JJJ-5  PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  5 D10-JJJ-47 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  6 D10-JJJ-15 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  7 D10-JJJ-27 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  8 D10-JJJ-10 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  9 D10-JJJ-28 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> 10 D10-JJJ-52 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> # … with 146 more rows, and 1 more variable: ref_umi_count <dbl>  # Read multiple files together ---------------------------------------------- read_tbl_ref_alt_cov(ref_file, alt_file, cov_file) #> # A tibble: 6,344 × 10 #>    sample     gene_id       gene  mutation_name  exonic_func  aa_change targeted #>    <chr>      <chr>         <chr> <chr>          <chr>        <chr>     <chr>    #>  1 D10-JJJ-23 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  2 D10-JJJ-43 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  3 D10-JJJ-55 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  4 D10-JJJ-5  PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  5 D10-JJJ-47 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  6 D10-JJJ-15 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  7 D10-JJJ-27 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  8 D10-JJJ-10 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #>  9 D10-JJJ-28 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> 10 D10-JJJ-52 PF3D7_0106300 atp6  atp6-Ala623Glu missense_va… Ala623Glu Yes      #> # … with 6,334 more rows, and 3 more variables: ref_umi_count <dbl>, #> #   alt_umi_count <dbl>, coverage <dbl>"},{"path":"https://bailey-lab.github.io/miplicorn/dev/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way. enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions). simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. expr() quotes new expression locally. mostly useful build new expressions around arguments captured enquo() enquos(): expr(mean(!!enquo(arg), na.rm = TRUE)). .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[. Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround. Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually : Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://bailey-lab.github.io/miplicorn/dev/news/index.html","id":"miplicorn-development-version","dir":"Changelog","previous_headings":"","what":"miplicorn (development version)","title":"miplicorn (development version)","text":"New read_tbl_genotype() function can used read genotypes_AA_table.csv genotypes_AN_table.csv generated MIPTools (#34).","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/miplicorn/dev/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"miplicorn 0.2.0","text":"Minimum R version bumped 3.4. reflects minimum version defined package imports. Deprecate chromosome_map() favor plot_chromoMap() plot_karyoploteR() (#25).","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/news/index.html","id":"read-files-0-2-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Read files","title":"miplicorn 0.2.0","text":"new read_tbl_*() family functions provides consistent function call read data tables generated MIPTools (#17). read_tbl_haplotype() can used read haplotypes_count.csv file generated MIPTools (#15).","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"miplicorn 0.2.0","text":"New vignette(\"faq\") answers frequently asked questions (#32). New mutation_frequency() plot_mutation_frequency() functions can used determine frequency mutations (#29). New mutation_prevalence() plot_mutation_prevalence() functions can used determine prevalence mutations (#23). New label_mutations() labels mutation \"ref\", \"alt\", \"ins\", \"del\" (#3). New theme_rainbow() creates custom theme.","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/news/index.html","id":"minor-improvements-and-bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"miplicorn 0.2.0","text":"plot_karyoploteR() longer prints plot noisily. read_tbl_*() functions longer change sample IDs (#20). now use rlang instead cli display messages, warnings, errors (#16). plot_karyoploteR() now works arbitrary column names (#14).","code":""},{"path":"https://bailey-lab.github.io/miplicorn/dev/news/index.html","id":"miplicorn-010","dir":"Changelog","previous_headings":"","what":"miplicorn 0.1.0","title":"miplicorn 0.1.0","text":"chromosome_map() can now create additional type map (#11). New chromosome_map() creates chromosome map annotated probe locations. theme_miplicorn() specifies custom theme creating figures. read() now allows filtering multiple conditions (#7). New arrange_natural() naturally sorts data frame (#5). New convert_single() convert_three convert amino acid abbreviations (#1). Increase efficiency read() (#2). Added NEWS.md file track changes package.","code":""}]
